(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{80:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return i})),r.d(n,"toc",(function(){return c})),r.d(n,"default",(function(){return s}));var t=r(3),o=(r(0),r(88));const a={id:"changelog",title:"Changelog",sidebar_label:"Changelog",slug:"/changelog"},i={unversionedId:"changelog",id:"changelog",isDocsHomePage:!1,title:"Changelog",description:"`",source:"@site/docs/changelog.md",slug:"/changelog",permalink:"https://libaco.org/docs/changelog",editUrl:"https://github.com/libaco/libaco.github.io/edit/master/docs/changelog.md",version:"current",sidebar_label:"Changelog",sidebar:"docs",previous:{title:"Best practice",permalink:"https://libaco.org/docs/best-practice"},next:{title:"Benchmark",permalink:"https://libaco.org/docs/benchmark"}},c=[],l={toc:c};function s({components:e,...n}){return Object(o.b)("wrapper",Object(t.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{}),'v1.2.4 Sun Jul 29 2018\n    Changed `asm` to `__asm__` in aco.h to support compiler\'s `--std=c99`\n    flag (Issue #16, proposed by Theo Schlossnagle @postwait).\nv1.2.3 Thu Jul 26 2018\n    Added support for MacOS;\n    Added support for shared library build of libaco (PR #10, proposed\n    by Theo Schlossnagle @postwait);\n    Added C macro ACO_REG_IDX_BP in aco.h (PR #15, proposed by\n    Theo Schlossnagle @postwait);\n    Added global C config macro ACO_USE_ASAN which could enable the\n    friendly support of address sanitizer (both gcc and clang) (PR #14,\n    proposed by Theo Schlossnagle @postwait);\n    Added README_zh.md.\nv1.2.2 Mon Jul 9 2018\n    Added a new option `-o <no-m32|no-valgrind>` to make.sh;\n    Correction about the value of macro ACO_VERSION_PATCH (issue #1 \n    kindly reported by Markus Elfring @elfring);\n    Adjusted some noncompliant naming of identifiers (double underscore\n    `__`) (issue #1, kindly proposed by Markus Elfring @elfring);\n    Supported the header file including by C++ (issue #4, kindly\n    proposed by Markus Elfring @elfring).\nv1.2.1 Sat Jul 7 2018\n    Fixed some noncompliant include guards in two C header files (\n    issue #1 kindly reported by Markus Elfring @elfring);\n    Removed the "pure" word from "pure C" statement since it is\n    containing assembly codes (kindly reported by Peter Cawley\n    @corsix);\n    Many updates in the README.md document.\nv1.2.0 Tue Jul 3 2018\n    Provided another header named `aco_assert_override.h` so user\n    could choose to override the default `assert` or not;\n    Added some macros about the version information.\nv1.1   Mon Jul 2 2018\n    Removed the requirement on the GCC version (>= 5.0).\nv1.0   Sun Jul 1 2018\n    The v1.0 release of libaco, cheers \ud83c\udf89\ud83c\udf89\ud83c\udf89\n')))}s.isMDXComponent=!0},88:function(e,n,r){"use strict";r.d(n,"a",(function(){return u})),r.d(n,"b",(function(){return g}));var t=r(0),o=r.n(t);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),d=function(e){var n=o.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},u=function(e){var n=d(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(r),f=t,g=u["".concat(i,".").concat(f)]||u[f]||p[f]||a;return r?o.a.createElement(g,c(c({ref:n},s),{},{components:r})):o.a.createElement(g,c({ref:n},s))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,i=new Array(a);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);